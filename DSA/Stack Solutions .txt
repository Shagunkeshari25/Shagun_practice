class Node:
  def __init__(self,Value):
    self.data = Value
    self.next = None
class Stack:
    def __init__(self):
      self.top = None

    def isempty(self):
      return self.top == None
    
    def push(self,value):
      new_node = Node(value)
      new_node.next = self.top
      self.top = new_node
      
    def pop(self):
      if (self.isempty()):
        return "Stack Empty"
      else:
        data = self.top.data
        self.top = self.top.next
        return data 
      
    def size(self):
      temp = self.top
      size = 0
      while temp != None:
        temp = temp.next
        size += 1

      return size
    
    def peek(self):
      if (self.isempty()):
        return 'Stack Empty'
      else:
        return self.top.data

        

# Solution 1     
def reverse_code(string):
    s = Stack()
    for i in string:
      s.push(i)
    res = ''
    while (not s.isempty()):
      res = res + s.pop()

    print(res)
      
reverse_code("Hello")

# Solution 2
def text_editor(text, pattern):
    u = Stack()
    r = Stack()
    for i in text:
      u.push(i)
    
    for i in pattern:
      if i == 'u':
         data = u.pop()
         r.push(data)

      else:
         data = r.pop()
         u.push(data)

    res = ''
    while not u.isempty():
      res = u.pop() + res

    return res

print(text_editor('Hello', 'uuurr'))

# Solution 3
L = [
    [0,0,1,1],
    [0,0,1,1],
    [1,0,0,1],
    [0,0,1,0]
  ]

def find_the_celeb(L):
    s = Stack()
    for i in range(len(L)):
      s.push(i)
    
    while s.size() >=2:
      i = s.pop()
      j = s.pop()

      if L[i][j] == 0:
        # j is not a celebrity
        s.push(i)

      else:
        # i is not a celebrity
        s.push(j)

    celeb = s.pop()
    for i in range(len(L)):
      if L[i][celeb]== 0 or L[celeb][i] == 1:
        print("No one is celebrity")
        return

    print("The celebrity is ",celeb)
      
find_the_celeb(L)

# Solution 4
def balanced_parantheses(equation):
  s = Stack()
  l = {
        '(': ')',
        '[': ']',
        '{': '}'
    }
  for i in equation:
    if i in ['[', '{', '('] :
      s.push(i)
    elif i in [']','}',')']:
      data = s.peek()
      if l[data] == i:
        s.pop()
      else:
        return False
    else:
      continue


  if (s.isempty()):
    return True
  else:
    return False
  
print(balanced_parantheses("('a'+'b')(")))
   
    


      
