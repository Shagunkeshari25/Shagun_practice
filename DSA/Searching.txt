# Linear Search 
def linear_search(arr,target):
    size = len(arr)
    for index in range(0,size):
        if(arr[index]== target):
            return index
        
    return -1

my_list = [10,23,45,70,11]
target = 45
print(linear_search(my_list,target))


# Binary Search
def binary_search(arr,target):
    size = len(arr)
    start = 0
    end = size-1

    while(start <= end):
        mid = (start+end)//2

        if (arr[mid]==target):
            return mid
        
        elif(arr[mid] > target):
            end = mid-1

        elif(arr[mid] < target):
            start = mid +1

    return -1

sorted_list = [10,23,35,45,50,70,85,80]
target = 45
print(binary_search(sorted_list,target))


# Binary Search Practice Questions

# Problem 1 : Count negative numbers in a sorted matrix
def countNegatives(grid):
    count = 0
    for row in grid :
        left,right = 0 , len(row)
        while left < right:
            mid = (left + right)//2
            if row[mid] < 0:
                right = mid

            else:
                left = mid+1

        count += len(row) - left
    return count

print(countNegatives([[4, 3, 2, 1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -1]])) 
print(countNegatives([[3, 2], [1, 0]] ))


# Problem 2 : Find smallest letter greater than target
def next_greatest_letter(letters, target):

    left, right = 0, len(letters) - 1
    answer = letters[0]  # default wrap-around

    while left <= right:
        mid = (left + right) // 2

        if letters[mid] > target:
            answer = letters[mid]
            right = mid - 1  # search in left half
        else:
            left = mid + 1  # search in right half

    return answer


# Problem 3 : Find First and Last Position of Element in Sorted Array
def searchRange(nums, target):
    
    def findleft():
        left,right = 0, len(nums)-1
        index = -1
        while left <= right:
            mid = (left+right)//2
            if nums[mid] >= target:
                if nums[mid] == target:
                    index = mid
                right = mid -1
            else:
                left = mid + 1 
                
        return index    
        
    def findright():
        left,right = 0, len(nums)-1
        index = -1
        while left <= right:
            mid = (left+right)//2
            if nums[mid] <= target:
                if nums[mid] == target:
                   index = mid
                left = mid + 1 
                
            else:
                right = mid -1
                
        return index
        
    left_index = findleft()
    right_index = findright()
    return[left_index,right_index]

print(searchRange([5, 7, 7, 8, 8, 10],8))
print(searchRange([5, 7, 7, 8, 8, 10],6))


# Problem 4: Minimum in Rotated Sorted Array
def findMin(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = (left + right) // 2
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid
    return nums[left]
 
print(findMin(nums = [4, 5, 6, 7, 0, 1, 2] ))
print(findMin([11, 13, 15, 17]))


# Problem 5 : Search in Rotated Sorted Array
def search(nums, target):
        left,right = 0,len(nums)-1
        while left <= right:
            mid = (left + right)//2
            if nums[mid] == target:
                return mid

            if nums[left] <= nums[mid] :
                if nums[left] <= target < nums[mid]:
                    right = mid - 1 
                else:
                    left = mid + 1

            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1
print(search([4,5,6,7,0,1,2] ,6))       

