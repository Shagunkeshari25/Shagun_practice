# Sorting 
# Bubble Sort 
def bubble_sort(lst):
    for pas in range(1, len(lst)):
        swaps = 0
        for i in range(len(lst)-pas):
            if lst[i] > lst[i+1]:
                k = lst[i+1]
                lst[i+1] = lst[i]
                lst[i] = k
                swaps += 1
               
        if swaps == 0:
            break
    return lst   

print(bubble_sort([64, 34, 25, 12, 22, 11, 90]))  
print(bubble_sort([1,3,6,8,9]))  


# Selection Sort
def selection_sort(lst):
    for i in range(len(lst)-1):
        min_index = i
        for j in range(i+1 , len(lst)):
            if lst[j] < lst[min_index]:
                min_index = j
                
        lst[i] , lst[min_index] = lst[min_index] , lst[i]
                
    return lst  
print(selection_sort([64, 74, 250, 12, 22, 11, 90])) 

# Insertion sort
def insertion_sort(arr):
    n = len(arr)

    for current in range(1,n):
        currentCard = arr[current]
        correctPosition = current-1
         
        while correctPosition >= 0:
            if arr[correctPosition] < currentCard:
                break

            else:
                arr[correctPosition+1] = arr[correctPosition]
                correctPosition -= 1
                arr[correctPosition + 1] = currentCard
    return arr
       
print(insertion_sort([12, 11, 13, 5, 6]))

   # OR

def insertion_sort_inplace(lst):
    for i in range(1, len(lst)):
        key = lst[i]
        j = i - 1
        while j >= 0 and key < lst[j]:
            lst[j + 1] = lst[j]
            j -= 1
        lst[j + 1] = key
    return lst

print(insertion_sort([3,9,6,2,1]))


# Merge sort using Recursion
def merge_sort(arr):
    def mergeSortHelper(arr,s,e):
        if s >= e:
            return
        m = s + (e-s)//2
        
        mergeSortHelper(arr,s,m)
        mergeSortHelper(arr,m+1,e)
        
        merge(arr,s,m,e)
        
        return 
    
    def merge(arr,s,m,e):
        i = s 
        j = m+1 
        ans =[]
        
        while (i<=m and j<=e):
            if arr[i] < arr[j]:
                ans.append(arr[i])
                i+=1 
                
            elif arr[i] > arr[j]:
                ans.append(arr[j])
                j+=1 
                
            elif arr[i] == arr[j]:
                ans.append(arr[i])
                ans.append(arr[j])
                i += 1 
                j += 1 
                
        while i<= m :
            ans.append(arr[i])
            i += 1 
            
        while j <=e :
            ans.append(arr[j])
            j += 1 
            
        startofmyans = 0
        startofmyList = s 
        while startofmyList <= e:
            arr[startofmyList] = ans[startofmyans]
            startofmyans += 1 
            startofmyList += 1 
        return 
    
    mergeSortHelper(arr,0,len(arr)-1)
    return arr

print(merge_sort([3, 0, 2, 5, -1, 4, 1]))

      # OR

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
 
    mid = len(arr) // 2
 
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])
 
    return merge(left_half, right_half)
 
def merge(left, right):
    sorted_list = []
    i = j = 0
 
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_list.append(left[i])
            i += 1
        else:
            sorted_list.append(right[j])
            j += 1
 
    while i < len(left):
        sorted_list.append(left[i])
        i += 1
 
    while j < len(right):
        sorted_list.append(right[j])
        j += 1
 
    return sorted_list
        
print(merge_sort([5, 2, 9, 1, 5, 6])) 


# Quick Sort Using Recursion
def quick_sort(arr):
    if len(arr) <= 1 :
        return arr
    
    pivot = arr[-1]
    smallerThanPivot = []
    greaterThanPivot = []
    
    for i in range(len(arr)-1):
        if arr[i] < pivot :
            smallerThanPivot.append(arr[i])
            
        else :
            greaterThanPivot.append(arr[i])
        
    return quick_sort(smallerThanPivot) + [pivot] + quick_sort(greaterThanPivot)

print(quick_sort([3,5,2,1,9,8]))
        