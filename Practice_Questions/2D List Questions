# Problem 1: Rotate Image
# Solution:
def rotate(matrix):
    n = len(matrix)
    for i in range(n):
        for j in range(i+1,n):
            matrix[i][j] ,matrix[j][i]= matrix[j][i],matrix[i][j]
    transpose_matrix = matrix
    for i in transpose_matrix:
        i.reverse()
    
    return transpose_matrix
print(rotate([[1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9]]))        



# Problem 2: Matrix obtained by Rotation or not?
# Solution:
def can_be_rotated(mat, target):
    
        n = len(mat)
        if mat == target:
            return True
    
        def rotate_90():
            temp = [row[:] for row in mat] # it is a way to create a deep copy of a 2D list (matrix) without using the copy module.
            for i in range(n):
                for j in range(i+1,n):
                    temp[i][j], temp[j][i] = temp[j][i] ,temp[i][j]
        
            for row in temp:
                row.reverse()
            return temp
    
        def rotate_270():
            temp = [row[:] for row in mat]
            for i in range(n):
                for j in range(i+1,n):
                    temp[i][j], temp[j][i] = temp[j][i] ,temp[i][j]
        
            temp.reverse()
            return temp
            
        def rotate_180():
            temp = [row[:] for row in mat]
            for row in temp:
                row.reverse()
            
            temp.reverse()
            return temp
        
        if rotate_90() == target:
            return True

        if rotate_270() == target:
            return True

        if rotate_180() == target:
            return True

        return False

print(can_be_rotated([[0, 0, 0], [0, 1, 0], [1, 1, 1]],[[1, 1, 1], [0, 1, 0], [0, 0, 0]]))   
print(can_be_rotated([[1,1],[0,1]],[[1,1],[1,0]]))  
    

# Problem 3: Spiral Matrix
# solution:
def spiral_order(matrix):
    result = []
    
    left , right = 0, len(matrix[0]) - 1
    top , bottom = 0, len(matrix) - 1
    
    while top <= bottom and left <= right:
        
        for i in range(left,right+1):
            result.append(matrix[top][i])
        top += 1 
        
        for i in range(top ,bottom+1):
            result.append(matrix[i][right])
        right -= 1 
        
        if top <= bottom:
            for i in range(right, left-1 ,-1):
                result.append(matrix[bottom][i])
            bottom -= 1 
                
        if  left <= right:
            for i in range(bottom ,top-1,-1):
                result.append(matrix[i][left])
            left += 1 
            
    return result
            
print(spiral_order([[1, 2, 3],[4, 5, 6],[7, 8, 9]]))


# Problem 4: Search a 2D Matrix
# Solution:
def search_matrix(matrix, target):
    rows = len(matrix)
    cols = len(matrix[0])

    left ,right = 0, rows * cols - 1
    while left <= right:
        mid = (left+right)//2
        row = mid // cols
        col = mid % cols
        
        if matrix[row][col] == target:
            return True
        elif matrix[row][col] < target:
            left = mid +1 
        else :
            right = mid -1 
                
    return False
   
print(search_matrix([[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], 3)) 


# Problem 5: Reshape Matrix
# Solution:
def matrix_reshape(mat, r, c):
    
    r1 = len(mat)
    c1 = len(mat[0])
    if r1 * c1 != r * c:
        return mat
    
    new_mat = []
    lst = [n for row in mat for n in row]
    k = 0
    for i in range(r):
        flat_lst = []    
        for j in range(c):
            flat_lst.append(lst[k])
            k += 1
        new_mat.append(flat_lst)
    return new_mat

print(matrix_reshape([[1, 2], [3, 4]], r = 1, c = 4))
print(matrix_reshape([[1, 2], [3, 4]], r = 2, c = 4))


# Problem 6: Transpose a matrix
# Solution:
def transpose(m):
  new_matrix = [] 
  for i in range(len(m[0])):
    flat_lst = []
    for j in range(len(m)):
      flat_lst.append(m[j][i])
  
    new_matrix.append(flat_lst)
    
  return new_matrix
  
print(transpose([[1,2,3],[4,5,6]]))