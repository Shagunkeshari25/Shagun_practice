# Problem 1: Two Sum

# Solution :
# def twoSum(nums, target):
#     for i in range(len(nums)):
#         for j in range(i+1,len(nums)):
#             if nums[i]+nums[j] == target:
#                 return [i,j]
            
# Problem 9: Palindrome Number

# Solution :
# def isPalindrome(x):

#     n = str(x)
#     return n == n[: :-1]

# Problem 13: Roman to Integer

# Solution :
# def romanToInt(s):
#     roman_to_integer = {'I': 1,
#                         'V': 5,
#                         'X': 10,
#                         'L': 50,
#                         'C': 100,
#                         'D': 500,
#                         'M': 1000}

#     s = s.replace('IV', 'IIII') \
#          .replace('IX', 'VIIII') \
#          .replace('XL', 'XXXX') \
#          .replace('XC', 'LXXXX') \
#          .replace('CD', 'CCCC') \
#          .replace('CM', 'DCCCC')
        
#     return sum(map(roman_to_integer.get, s))

# print(romanToInt('XCIII'))

#      OR
            
# def romanToInt(s: str) -> int:
#        roman_to_int = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
#        prev_value = 0
#        total = 0

#        def process(numeral):
#           nonlocal prev_value, total
#           current_value = roman_to_int[numeral]
#           if current_value < prev_value:
#             total -= current_value
#           else:
#             total += current_value

#           prev_value = current_value

#        list(map(process, reversed(s)))
#        return total

# print(romanToInt('XCIVII'))

# Problem 14: Longest Common Prefix

# Solution :
# def longestCommonPrefix(strs):
#         if not strs:
#             return ""

#         prefix = strs[0]
#         for s in strs[1:]:
#             while not s.startswith(prefix):
#                 prefix = prefix[:-1]
#                 if not prefix:
#                     return ""

#         return prefix
# print(longestCommonPrefix(["dog","racecar","car"]))
# print(longestCommonPrefix(["flower", "flow", "flight"]))

# Problem 20: Valid Parentheses

# Solution :
# def isValid(s: str) -> bool:
#     L = {'(':')','{':'}','[':']'}
#     coll= []
#     for i in s:
#         if i in L.keys():
#           coll.append(i) 
#         elif i in L.values():
#             if not coll:
#               return False
#             data = coll[-1]
#             if L[data] == i:
#                 coll.pop()
#             else:
#                 return False

#     if not coll:
#       return True
#     else:
#       return False 

# print(isValid("[]"))

# Problem 21 : Merge two Sorted list

#Solution :
# def mergeTwoLists(list1, list2):
#         dummy = ListNode()
#         current = dummy

#         while list1 and list2:
#             if list1.val < list2.val:
#                 current.next= list1
#                 list1 = list1.next
#             else:
#                 current.next = list2
#                 list2 = list2.next
#             current = current.next
        
#         current.next = list1 if list1 else list2
#         return dummy.next    

# Problem 26 : Remove Duplicate from Sorted Array

# Solution :
# def removeDuplicates(nums):
#     i=1
#     for j in range(1,len(nums)):
#         if nums[j] != nums[i-1]:
#             nums[i] = nums[j]
#             i += 1
#     return i
# print(removeDuplicates([0,0,1,1,1,2,4,5]))

# Problem 27 : Remove Element

# Solution :
# def removeElement(nums, val):
#         i = 0
#         for j in range(len(nums)):
#             if nums[j] != val:
#                 nums[i] = nums[j]
#                 i +=1
#         print(i)
            
# removeElement([3,2,2,3],3)

# Problem 28 :Find the index of first occurrence in a string
       
# Solution :
# def strStr(haystack, needle):
#         n = len(needle)
#         for j in range(len(haystack)):
#             if haystack[j:j+n] == needle:
#                 return j
            
#         return -1
# print(strStr("sadbutsad","sad"))  

# Problem 35 : Search insert Position

# Solution :
# def searchInsert(nums, target):
#         for i in range(len(nums)):
#             if nums[i] == target:
#                 return i        
#             elif nums[i] > target:
#                 return i 
            
#         return i+1
            
# print(searchInsert([1,3,5,6],7))

# Problem 58 : Length of Last Word

# Solution :
# def lengthOfLastWord(s):
#         word = s.split()[-1]
#         return len(word)

# s = "   fly me   to   the moon  "
# print(lengthOfLastWord(s))

# Problem 66 :Plus One

# Solution :
# def plusOne(digits):
#     for i in range(len(digits)-1,-1,-1):
#         if digits[i] < 9:
#             digits[i] += 1
#             break
#         else:
#             digits[i] =0
#     else:
#         digits.insert(0,1) # Runs only if all digits were 9
    
#     return digits

# digits = [9,9]
# print(plusOne(digits))

# Probelm 67: Add Binary

# Solution :
# def addBinary(a, b):
#         result = str(bin(int(a,2) + int(b,2))[2:])
#         print(result)

# addBinary("1010", "1011")

# Problem 69: sqrt(x)

# Solution :
# import math
# def mySqrt(x):
#     result1= math.isqrt(x) # .isqrt() returns only the integer part
#     result2= math.sqrt(x)
#     print(result1)
#     print(result2)

# mySqrt(26)

# Problem 83 : Remove Duplicates from sorted List    

# Solution :    
# def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
#         curr = head
#         while curr and curr.next:
#             if curr.val == curr.next.val:
#                 curr.next = curr.next.next
#             else:  
#                 curr = curr.next
#         return head

# Problem 88: Merge Sorted Array

# Solution :
def merge(nums1, m, nums2, n):
    p1 = m-1
    p2 = n-1
    p = m+n-1
    while p2>=0:
        if p1>=0 and nums1[p1] > nums2[p2]:
            nums1[p] = nums1[p1]
            p1 -= 1
                
        else:
            nums1[p] = nums2[p2]
            p2 -= 1
        p -=1   

    return nums1

  # OR
def merge(nums1, m, nums2, n):
    i = m - 1 
    j = n - 1  
    k = m + n - 1 
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1

    while j >= 0:
        nums1[k] = nums2[j]
        j -= 1
        k -= 1

    return nums1

print(merge([1,2,3,0,0,0],3,[2,5,6],3))

# Problem 125: Valid Palindrome

# Solution :
def isPalindrome(s):
    S = ''.join(l.lower() for l in s if l.isalnum())
    return S == S[::-1]
        
print(isPalindrome("A man, a plan, a canal: Panama"))
print(isPalindrome("race a car"))


# Problem 203: Remove Linked List Elements

# Solution :
# def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
#         dummy = ListNode(0)
#         dummy.next = head
#         curr = dummy
#         while curr and curr.next:
#             if curr.next.val == val:
#                 curr.next = curr.next.next
             
#             else:
#                 curr = curr.next

#         return dummy.next 
# print(removeElements([1,2,6,3,4,5,6],6))


# Problem 2 : Add Two Numbers

# Solution :
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        head = ListNode(0)  # Dummy node to simplify code
        curr = head
        carry = 0
        
        # Traverse both lists
        while l1 or l2:
            # Get the values from l1 and l2, or use 0 if the list is shorter
            v1 = l1.val if l1 else 0
            v2 = l2.val if l2 else 0
            
            # Sum the values and the carry from the previous iteration
            total = v1 + v2 + carry
            carry = total // 10  # Update carry for next iteration
            curr.next = ListNode(total % 10)  # Create a new node with the last digit of total
            curr = curr.next  # Move to the next node
            
            # Move to the next nodes in l1 and l2, if available
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next
        
        # If there is a carry left, create a new node for it
        if carry:
            curr.next = ListNode(carry)
        
        return head.next  # Return the result, starting from the first actual node

# Helper function to convert a list to a linked list
def list_to_linked_list(lst):
    dummy = ListNode(0)
    curr = dummy
    for val in lst:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

# Helper function to convert a linked list to a list
def linked_list_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Example usage:
l1 = list_to_linked_list([2, 4, 3])  # 342
l2 = list_to_linked_list([5, 6, 4])  # 465
sol = Solution()
result = sol.addTwoNumbers(l1, l2)
print(linked_list_to_list(result))  # Output: [7, 0, 8] (807 in reverse)


# Problem 136: Single Number

# Solution:
def singleNumber(nums):
    result = 0
    for num in nums:
        result = result ^ num      # XOR with current number
    return result

print(singleNumber([4,1,2,1,2]))


# Problem 118: Pascal's Triangle

# Solution:
def generate(numRows):
        List =[]
        for i in range(1,numRows+1):
            if i>2:
                pre_row = List[i-2]
                new_row = [1]
                for k in range(1,len(pre_row)):
                    new_row.append(pre_row[k-1]+ pre_row[k])
                new_row.append(1)
                List.append(new_row)

            else:
                List.append([1]*i)

        return List
print(generate(5))


# Problem 169: Majority Element

# Solution
def majorityElement(nums):
        dict = {}
        majority_ele = len(nums)//2
        for i in nums:
            if i in dict:
                dict[i] += 1

            else:
                dict[i] = 1

        for key in dict:
            if dict[key] > majority_ele :
                return key
                
        
print(majorityElement([3,2,3]))


# Problem 119: Pascal's Triangle II

#solution :
def getRow(rowIndex):
        list = []
        for i in range(rowIndex+1):
            if i>1:
                pre_row = list[i-1]
                new_row = [1]
                for j in range(len(pre_row)-1):
                    new_row.append(pre_row[j] + pre_row[j+1])
                new_row.append(1)
                list.append(new_row)

            else:
                list.append([1]*(i+1))

        return list[rowIndex]
print(getRow(3))


# Problem 744: Find Smallest Letter Greater Than Target

# Solution :
def nextGreatestLetter(letters, target):
        left,right = 0 , len(letters) -1
        result = letters[0]

        while left <= right:
            mid = (left+ right)//2

            if letters[mid] > target:
                result = letters[mid]
                right = mid -1

            else:
                left = mid +1

        return result
print(nextGreatestLetter(letters = ["c","f","j"], target = "a"))
print(nextGreatestLetter(letters = ["c","f","j"], target = "f"))


# Problem 1351: Count Negative Numbers in a Sorted Matrix

# Solution :
def countNegatives(grid):
    count = 0
    for row in grid:
        left,right = 0,len(row)
        while left < right:
            mid = (left+ right)//2
            if row[mid] < 0 :
                right = mid
            else:
                left = mid +1
                
        count += len(row) - left
        
    return count
print(countNegatives([[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]))
print(countNegatives([[3,2],[1,0]]))


# Problem 34 : Find First and Last Position of Element in Sorted Array

# Solution :
def searchRange(nums, target):
    
    def findleft():
        left,right = 0, len(nums)-1
        index = -1
        while left <= right:
            mid = (left+right)//2
            if nums[mid] >= target:
                if nums[mid] == target:
                    index = mid
                right = mid -1
            else:
                left = mid + 1 
                
        return index    
        
    def findright():
        left,right = 0, len(nums)-1
        index = -1
        while left <= right:
            mid = (left+right)//2
            if nums[mid] <= target:
                if nums[mid] == target:
                   index = mid
                left = mid + 1 
                
            else:
                right = mid -1
                
        return index
        
    left_index = findleft()
    right_index = findright()
    return[left_index,right_index]

print(searchRange([5, 7, 7, 8, 8, 10],8))
print(searchRange([5, 7, 7, 8, 8, 10],6))
        

# Problem 153: Find Minimum in Rotated Sorted Array

# Solution: 
def findMin(nums):
        left,right = 0, len(nums)-1
        min_value = float('inf')
        while left <= right:
            mid = (left+right)//2
            min_value = min(nums[mid],min_value)
            if nums[mid] > nums[right]:
                left = mid +1

            else:
                right = mid -1
        return min_value

print(findMin(nums = [4, 5, 6, 7, 0, 1, 2] ))
print(findMin([12, 13, 15, 17]))


# Problem 33 : Search in Rotated Sorted Array

# Solution :
def search(nums, target):
        left,right = 0,len(nums)-1
        while left <= right:
            mid = (left + right)//2
            if nums[mid] == target:
                return mid

            if nums[left] <= nums[mid] :
                if nums[left] <= target < nums[mid]:
                    right = mid - 1 
                else:
                    left = mid + 1

            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1
print(search([4,5,6,7,0,1,2] ,4))      


# Problen 268: Missing Number

# Solution :
def missingNumber(nums):
        n = len(nums)
        expected_sum = n*(n+1)//2
        actual_sum = sum(nums)

        return expected_sum - actual_sum
print(missingNumber([3, 0, 2]))
print(missingNumber([0, 1]))


# Problem 283: Move Zeroes

# Solution :
def moveZeroes(nums):         # Use two-pointer approach

        non_zero_index = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[non_zero_index] = nums[i]
                non_zero_index += 1

        while non_zero_index < len(nums):
            nums[non_zero_index] = 0
            non_zero_index += 1

        return nums
print(moveZeroes([0,1,0,3,12]))      


# problem 349: Intersection of Two Arrays

# Solution :
def intersection(nums1,nums2):
        count_intersection = []
        s1 = set(nums1)
        s2 = set(nums2)
        for i in s1:
            if i in s2:
                count_intersection.append(i)
        return count_intersection
print(intersection([1, 2, 2, 1],[2,2]))
print(intersection([4,9,5],[9,4,9,8,4]))


# Problem 485: Max Consecutive Ones

# Solution:
def findMaxConsecutiveOnes(nums):
        current_count = 0
        max_count = 0
        for n in nums:
            if n == 1:
                current_count += 1 
                if current_count > max_count:
                    max_count = current_count

            else:
                current_count = 0

        return max_count
print(findMaxConsecutiveOnes([1,1,0,1,1,1]))


# Problem 48: Rotate Image

# Solution:
def rotate(matrix):
        n = len(matrix)
        for i in range(n):
            for j in range(i+1,n):
                matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]

        transpose_matrix = matrix
        for i in transpose_matrix:
            i.reverse()
        
        return transpose_matrix
print(rotate([[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]))


# Problem 1886: Determine Whether Matrix can be obtained by Rotation

# Solution :
def findRotation(mat, target):
        n = len(mat)
        if mat == target:
            return True
    
        def rotate_90():
            temp = [row[:] for row in mat]  # Deepcopy
            for i in range(n):
                for j in range(i+1,n):
                    temp[i][j], temp[j][i] = temp[j][i] ,temp[i][j]
        
            for row in temp:
                row.reverse()
            return temp
        
        if rotate_90() == target:
            return True
    
        def rotate_270():
            temp = [row[:] for row in mat]
            for i in range(n):
                for j in range(i+1,n):
                    temp[i][j], temp[j][i] = temp[j][i] ,temp[i][j]
        
            temp.reverse()
            return temp
        
        if rotate_270() == target:
            return True
            
        def rotate_180():
            temp = [row[:] for row in mat]
            for row in temp:
                row.reverse()
            
            temp.reverse()
            return temp
        
        if rotate_180() == target:
            return True

        return False 

print(findRotation([[0, 0, 0], [0, 1, 0], [1, 1, 1]],[[1, 1, 1], [0, 1, 0], [0, 0, 0]]))   
print(findRotation([[1,1],[0,1]],[[1,1],[1,0]]))  
    

# Problem 509: Fibonacci Number

# Solution:
def fib(n):
    if(n==0):
        return 0
    elif(n==1):
        return 1

    else:
        return fib(n-1) + fib(n-2)
    
print(fib(3))


# Problem 54: Spiral Matrix

# Solution:
def spiralOrder(matrix):
        result = []
        left , right = 0 , len(matrix[0])-1
        top , bottom = 0, len(matrix) - 1

        while top <= bottom and left <= right:
            for i in range(left , right +1):
                result.append(matrix[top][i])
            top += 1 

            for i in range(top, bottom +1):
                result.append(matrix[i][right])
            right -= 1 

            if top <= bottom:
                for i in range(right,left-1,-1):
                    result.append(matrix[bottom][i])
                bottom -= 1

            if left <= right:
                for i in range(bottom,top-1,-1):
                    result.append(matrix[i][left])
                left += 1

        return result

print(spiralOrder([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))        


# Problem 74: Search a 2D Matrix

# Solution:
def searchMatrix(matrix, target):

    rows = len(matrix)
    cols = len(matrix[0])

    left , right = 0 , rows*cols-1
    while left <= right:
        mid = (left+right)//2
        row = mid // cols
        col = mid % cols

        if matrix[row][col] == target:
            return True

        elif matrix[row][col] < target:
            left = mid + 1 
        else:
            right = mid - 1
    return False

print(searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]],13)) 


# Problem 202: Happy Number

# Solution:
def isHappy(n):

    previous_sum = set()
    while True:
        sum = 0
        for i in str(n):
            sum += int(i)**2

        if sum == 1:
            return True

        if sum in previous_sum:
            return False
        
        previous_sum.add(sum)
        n = sum

print(isHappy(19))
print(isHappy(2))


# Problem 566: Reshape the Matrix

# Solution:
def matrixReshape(mat, r, c):
    r1 = len(mat)
    c1 = len(mat[0])
    if r1 * c1 != r * c:
        return mat

    lst = [n for row in mat for n in row]
    new_mat = []
    k = 0
    for i in range(r):
        flat_lst = []
        for j in range(c):
            flat_lst.append(lst[k])
            k += 1
        new_mat.append(flat_lst)

    return new_mat

print(matrixReshape([[1, 2], [3, 4]], r = 1, c = 4))
print(matrixReshape([[1, 2], [3, 4]], r = 2, c = 4))


# Problem 61: Rotate List

# Solution:
# def rotateRight(head, k):
#     if not head  or not head.next or k==0 :
#         return head
    
#     length = 1
#     current = head
#     while current.next:
#         length += 1
#         current = current.next
    
#     tail = current
#     tail.next = head 

#     k = k % length
#     steps_to_new_tail = length - k
    
#     new_tail = head
#     for _ in range(steps_to_new_tail -1):
#         new_tail = new_tail.next

#     new_head = new_tail.next
#     new_tail.next = None

#     return new_head
        
# print(rotateRight([1,2,3,4,5], k = 2))


# Problem 141: Linked List Cycle

# Solution:
def hasCycle( head):

    slow = head 
    fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True

    return False


# Problem 142: Linked List Cycle II

# Solution:
def detectCycle(head):
    slow = head
    fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break
    else:
        return None
    
    slow = head
    pos = 0
    while slow != fast:
        slow = slow.next
        fast = fast.next
        pos += 1

    return slow


# Problem 206: Reverse Linked List

# Solution:
def reverseList(head):
    if not head or not head.next:
        return head

    previous_node = None
    current = head 
    next_node = current.next

    while current: 
        next_node = current.next
        current.next = previous_node
        previous_node = current
        current = next_node

    return previous_node
    

# Problem 492: Construct the Rectangle
        
# Solution:
def constructRectangle(area):
    result = [area,1]
    min_value = area-1
    for i in range(1 , int(area ** 0.5) + 1):
        if area % i == 0:
            L = area//i
            W = i
            if L >= W and (L - W) <= min_value:
                min_value = L-W
                result = [L,W]
    return result    
    
print(constructRectangle(37))
print(constructRectangle(122122))


# Problem 326: Power of Three

# Solution :
def isPowerOfThree(n):
    if n < 1 :
        return False
        
    while n % 3 == 0:
        n //= 3
    return n == 1

print(isPowerOfThree(154))
print(isPowerOfThree(1))


# Problem 2264: Largest 3-Same-Digit Number in String

# Solution:
def largestGoodInteger(num):
    good = ""
    count = 1
    for i in range(1,len(num)):
        if num[i] == num[i-1]:
            count += 1
        else:
            count = 1 
                        
        if count == 3:
            triple = num[i] * 3
            if triple > good:
                good = triple   
    return good

print(largestGoodInteger("6777133339")) #There are two distinct good integers: "777" and "333"
                                        # "777" is the largest, so we return "777".

print(largestGoodInteger("42352338"))


# Problem 342: Power of Four

# Solution:
def isPowerOfFour(n):
    while n > 1:
        if n % 4 == 0:
            n //= 4
        else:
            return False
        
    return n == 1


# Problem 19: Remove Nth Node From End Of List

# Solution:
def removeNthFromEnd(head,n):
    temp = head
    current = head
    length = 1
    while temp.next:
        length += 1
        temp = temp.next
    
    k = length - n

    if k == 0:
        return head.next

    while k >1:
        current = current.next
        k -= 1
    
    current.next = current.next.next
    return head


# Problem 22: Generate Parentheses

# Soluiton:
def generateParenthesis(n):
    result = []

    def backtrack(current,open,close):
        if open == n and close == n:
            result.append(current)
            return

        if open < n :
            backtrack(current + '(', open+1 , close)

        if close < open:
            backtrack(current + ')', open , close+1)

    backtrack("",0,0)
    return result

generateParenthesis(3)


# Problem 17: Letter Combinations of a Phone Number
def letterCombinations(digits):
        keys = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv', '9':'wxyz'}
        if digits == '':
            return []
            
        if len(digits) == 1:
            return [digit for digit in keys[digits]]

        first_digit_letter = keys[digits[0]]
        SmallAns = letterCombinations(digits[1:])
        result = []

        for i in first_digit_letter:
            for j in SmallAns:
                result.append(i + j)

        return result  

print(letterCombinations('23'))


# Problem 3: Longest Substring Without Repeating Characters
def lengthOfLongestSubstring(s):
    if s == "":
        return 0
        
    substring = ""
    Substring = ""
    for i in s:
        if i not in substring:
            substring += i

        else:
            if len(Substring) <= len(substring):
                Substring = substring
            index = substring.index(i)
            substring = substring[index+1:] + i

    return max(len(substring), len(Substring))
print(lengthOfLongestSubstring("bbb"))

       # OR

def lengthOfLongestSubstring(s):
    seen_char = set()
    left = 0
    max_length = 0

    for right in range(len(s)):
        while s[right] in seen_char:
            seen_char.remove(s[left])
            left += 1

        seen_char.add(s[right])
        max_length = max(max_length, right-left +1)

    return max_length
print(lengthOfLongestSubstring("abcabcbb"))


# Problem 5: Longest Palindromic Substring
def longestPalindrome(s):

    def aroundCenter(left,right):
        while left>=0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left+1:right]
         
    S = ""
    for i in range(len(s)):
        odd = aroundCenter(i,i)
        even = aroundCenter(i,i+1)
        
        if len(odd) > len(S):
            S = odd
        if len(even) > len(S):
            S = even

    return S
print(longestPalindrome("racecat"))
print(longestPalindrome("abbad"))


# Problem 7: Reverse Integer
def reverse(x):
        sign = -1 if x < 0 else 1
            
        res = str(abs(x))[::-1]
        res = res.lstrip('0')
        
        if not res:
            return 0

        reverse_num = sign * int(res)

        if reverse_num < -2**31 or reverse_num > 2**31 - 1:
            return 0
        return reverse_num

        # OR
def reverse(x):
        res = 0
        if x < 0:   
            res = int(str(x)[1:][::-1]) * -1
        else:
            res = int(str(x)[::-1])

        if res < -2**31 or res > 2**31 - 1:
            return 0

        return res

print(reverse(-123))


# Problem 1838: Frequency of the Most frequent Element   
def maxFrequency(nums ,k):
        nums.sort()
        left = 0
        total = 0
        max_freq = 0
        
        for right in range(len(nums)):
            total += nums[right]

            while (right-left+1) * nums[right] - total > k:
                total -= nums[left]
                left += 1
               
            max_freq = max(max_freq , right - left+1)

        return max_freq  

print(maxFrequency([1,2,4],5)) 
print(maxFrequency([3,6,9],2)) 
print(maxFrequency([1,4,8,13],5)) 


# Problem 1004: Max Consecutive Ones III
def longestOnes(nums,k):
        left = 0 
        max_len = 0
        count = 0

        for right in range(len(nums)):
            if nums[right] == 0:
                count += 1
                
            while right < len(nums) and count > k:
                if nums[left] == 0:
                    count -= 1
                left += 1
            
            max_len = max(max_len ,right-left +1)

        return max_len

        # OR
def longestOnes(nums,k):
    left = 0
    zeroCount = 0

    for num in nums:
        if num == 0:
            zeroCount += 1
        if zeroCount > k:
            if nums[left] == 0:
                zeroCount -= 1
            left += 1

    return len(nums) - left     
print(longestOnes([1,1,1,0,0,0,1,1,1,1,0],2))  
        

