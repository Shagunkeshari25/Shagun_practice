# Example 1: Sum of list Elements
def sum_list(numbers):
    sum = 0
    for i in numbers:
        sum = sum + i
    return sum
print(sum_list([1,2,3,4,5]))

# Example 2: Largest element in a List
def find_largest(numbers):
    largest_no = numbers[0]
    for i in numbers:
        if i > largest_no:
            largest_no = i
    return largest_no
print(find_largest([3, 8, 2, 10, 5]))
       # OR
numbers = [3, 8, 2, 10, 5]
numbers.sort()
print(numbers[-1])

# Example 3: Remove Duplicate in a list
def remove_duplicates(lst):
    lst1=[]
    for i in lst:
        if i not in lst1:
            lst1.append(i)
    return lst1
print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))

# Example 4: Check if all the Elements in a list are unique
def check_unique(lst):
    for i in range(len(lst)):
        for j in range(i+1,len(lst)):
            if lst[i] == lst[j]:
                return False
    else:
        return True
print(check_unique([1, 2, 3, 3, 4, 5]))
   #OR
def check_unique(lst):
    seen = set()
    for num in lst:
        if num in seen:
            return False
        seen.add(num)
    
    return True
print(check_unique([1, 2, 3, 4, 5]))


# Example 5: Program to Reverse a List
def reverse_list(lst):
    reverse_list = []
    for i in range(len(lst)-1,-1,-1):
        reverse_list.append(lst[i])
        
    return reverse_list
print(reverse_list([1,2,3,4,5])) 
 
   # OR

def reverse_list(lst):
    # Initialize two pointers: one at the beginning, one at the end
    start = 0
    end = len(lst) - 1
    # Swap elements until the two pointers meet in the middle
    while start < end:
        lst[start], lst[end] = lst[end], lst[start]
        start += 1
        end -= 1
    return lst    
print(reverse_list([1,2,3,4])) 


# Example 6: Count Number of Odd and Even Elements in a List
def count_even_odd(lst):
    even_count = 0
    odd_count = 0
    for i in lst:
        if i % 2 == 0:
            even_count += 1
        else :
            odd_count += 1
    return even_count,odd_count
print(count_even_odd([1, 2, 3, 4, 5]))

# Example 7: Maximum difference between two consecutive elements in a list.
def max_consecutive_difference(lst):
    if not lst:
        return 0
    else:
        Max_difference = abs(lst[0] - lst[1])
        for i in range(0, len(lst)-1):
           if abs(lst[i] - lst[i+1]) > Max_difference:
                Max_difference = abs(lst[i] -lst[i+1])
        return Max_difference
print(max_consecutive_difference([10, 11, 15, 3]))

# Example 8: Merge two Sorted List
def merge_two_sorted_lists(list1, list2):
    list = []
    i,j = 0,0  #pointer for list1 and list2
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            list.append(list1[i])
            i += 1
        else:
            list.append(list2[j])
            j += 1
            
    while i < len(list1):
        list.append(list1[i])
        i += 1
        
    while j < len(list2):
        list.append(list2[j])
        j+=1
    return list    
print(merge_two_sorted_lists([1, 3, 5],[2, 4, 6]))


# Example 9: Rotate a list
def rotate_list(lst, k):
    if not lst:
        return []
    
    k = k % len(lst)  # handle cases where k >len(lst) efficiently
    for _ in range(k):
        m = lst.pop()
        lst.insert(0,m)
    
    return lst

print(rotate_list([10, 20, 30, 40, 50],3))

# Example 10: List into Dictionary
def merge_lists_to_dictionary(keys, values):
    if len(keys) != len(values):
        return False
    
    dict = {}
    for key, value in zip(keys,values):
        dict[key] = value
        
    return dict
print(merge_lists_to_dictionary(['a','b','c'],[1,2,3]))

     #OR
def merge_lists_to_dictionary(keys, values):
    if len(keys) != len(values):
        return False
    
    result = {}
    for i in range(len(keys)):
        result[keys[i]] = values[i]

    return result

print(merge_lists_to_dictionary(['a','b','c'],[1,2,3]))


# Example 11: Merge Multiple Dictionaries
def merge_three_dictionaries(dict1, dict2, dict3):

    merged_dict = dict1.copy()

    for key, value in dict2.items():
        merged_dict[key] = value
    
    for key, value in dict3.items():
        merged_dict[key] = value
    
    return merged_dict

print(merge_three_dictionaries({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}))

          #OR
def merge_three_dictionaries(dict1, dict2, dict3):
    merge_dict ={**dict1, **dict2}
    result_dict = {**merge_dict,**dict3}
    return result_dict
    
print(merge_three_dictionaries({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}))


# Example 12: Words Frequency in a Sentence
def count_word_frequency(sentence):
    count_frequency = {}
    S = sentence.split( )
    for i in S:
        count_frequency[i] = count_frequency.get(i,0) + 1
        
    return count_frequency

print(count_word_frequency("hello world hello")) 

# Example 13: Palindromic Tuple
def is_palindromic_tuple(tup):
    return tup == tup[::-1]

print(is_palindromic_tuple((1,2,3,2,1)))
print(is_palindromic_tuple(('a',)))
 
# Example 14: Merge Dictionaries with Common Keys
def merge_dicts_with_overlapping_keys(dicts):
    result_dict = {}
    for i in dicts:
        for key,value in i.items():
            result_dict[key] = result_dict.get(key,0) + value # or i[key]
   
    return result_dict

   # OR
def merge_dicts_with_overlapping_keys(dicts):
    result_dict = {}
    for d in dicts:
        for key, value in d.items():
            if key in result_dict:
                result_dict[key] += value
            else:
                result_dict[key] = value
    return result_dict

print(merge_dicts_with_overlapping_keys([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}]))


# Example 15: Check if List is Subset of another List
def is_subset(lst1, lst2):
    i ,j = 0,0
    while i< len(lst1) and j < len(lst2):
        if lst1[i] == lst2[j] :
            i += 1
        j += 1
        
    return i == len(lst1)

print(is_subset([1, 2, 3],[1, 2, 3, 4, 5]))