# Problem 1: Sum of N Even Natural Numbers

def sum_of_even_numbers(n):
    sum = 0 
    for i in range(1,n+1):
            sum += i*2
            
    return sum
print(sum_of_even_numbers(5))

# Problem 2: Check for Even Number

def is_even(n):
    
    if n % 2 == 0:
        return True
    else:
        return False
print(is_even(8))

# Problem 3: Check for Prime Number
def is_prime(n):
    if n <= 1 :
        return False
        
    for i in range(2, int(n ** 0.5)+1):
        if n % i == 0:
            return False
        
    else:
        return True
print( is_prime(9))

# Problem 4: Valid Perfect Square
def is_perfect_square(num):
    if num < 1:
        return False
        
    return num**0.5 == int(num**0.5) 

print(is_perfect_square(16))

# Problem 5: Decimal to Binary
def int_to_binary(n):
    if n == 0:
        return "0"
        
    is_negative = n<0
    
    n = abs(n)
    k =""
    while n > 0 :
        k += str(n % 2)
        n = n // 2
        
    return "-" + k[::-1] if is_negative else k[::-1]
        
print(int_to_binary(-5))

# Problem 6: Binary to Decimal
def binary_to_decimal(binary_str):
     
    n = binary_str.startswith('-')    # or int(binary_str) < 0
    binary_str = binary_str.lstrip('-')  # or str(abs(int(binary_str)))
    
    Decimal = 0
    for i in range(len(binary_str)): 
        bit = int(binary_str[-(i+1)])
        Decimal += (2**i)*bit
           
    return -Decimal if n else Decimal 
        
print(binary_to_decimal('1101'))
print(binary_to_decimal('-100'))


# Problem 7: GCD of Two Numbers
def gcd(n,m):                 # Brute Force Approach
    result = 1
    i = 1
    while i <= n and i <= m:
        if n % i == 0 and m % i == 0:
            if i > result:
                result = i
        i += 1
    return result
print(gcd(48,18))
   
   #OR
   
def gcd(n,m):           # By using Euclidean algorithm
    while m != 0:
        n,m = m,n%m
    return n
print(gcd(56,98))


# Problem 8: check for prime product
def primeproduct(m):
    def is_prime(n):
        if n<2:
           return False
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
               return False
        return True
  
    for i in range(2,int(m**0.5)+1):
        if m%i==0:
           if is_prime(i) and is_prime(m//i):
              return True
    return False

print(primeproduct(202))
print(primeproduct(188))
print(primeproduct(6))